import os
import requests
from collections import defaultdict
from flask import Flask, request, jsonify, send_from_directory

app = Flask(__name__)

# Store user data (link history)
user_links = defaultdict(list)

# Set your Telegram Bot token here
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "your-telegram-bot-token")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/"

# Endpoint to handle Telegram Webhook
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    print("Received data:", data)

    if "message" in data:
        chat_id = data["message"]["chat"].get("id")
        text = data["message"].get("text")
        username = data["message"]["chat"].get("first_name", "")

        if text and text.startswith("http"):
            # Process the link
            response_message = process_link(chat_id, text, username)
            send_message(chat_id, response_message)
            # Save link history
            user_links[chat_id].append(text)
            # Generate and save HTML page with updated history
            html_link = generate_html(chat_id)
            send_message(chat_id, f"Here is your updated link history: {html_link}")

        else:
            send_message(chat_id, "Please send a valid link.")

    return jsonify({"status": "ok"}), 200

# Function to process the link and generate a personalized response
def process_link(chat_id, link, username):
    # Here, you would crawl or categorize the link (this is a placeholder)
    topic = "General"  # Placeholder for AI/crawling categorization
    enriched_data = {
        "message": f"Hi {username}, thanks for sharing! Here's what we found:",
        "link": link,
        "topic": topic
    }
    response_message = f"{enriched_data['message']}\n\nOriginal Link: {link}\nTopic: {topic}"
    return response_message

# Function to generate the HTML page with the link history
def generate_html(chat_id):
    # Ensure the directory exists
    directory = "/app/storage/links_history"
    if not os.path.exists(directory):
        os.makedirs(directory)

    # Generate a professionally designed HTML page
    history_html = f"""
    <html>
    <head>
        <title>Link History</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background-color: #f4f7f6;
                margin: 0;
                padding: 0;
                color: #333;
            }}
            .container {{
                width: 80%;
                margin: 50px auto;
                background-color: #fff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }}
            h1 {{
                color: #2c3e50;
                text-align: center;
                font-size: 36px;
                margin-bottom: 20px;
            }}
            h2 {{
                font-size: 24px;
                color: #34495e;
                border-bottom: 2px solid #ecf0f1;
                padding-bottom: 10px;
                margin-bottom: 20px;
            }}
            ul {{
                list-style-type: none;
                padding: 0;
            }}
            li {{
                background-color: #ecf0f1;
                margin: 10px 0;
                padding: 10px;
                border-radius: 4px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }}
            li a {{
                text-decoration: none;
                color: #2980b9;
                font-weight: bold;
            }}
            li a:hover {{
                text-decoration: underline;
            }}
            footer {{
                text-align: center;
                font-size: 14px;
                color: #7f8c8d;
                margin-top: 30px;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Link History for {chat_id}</h1>
            <h2>Shared Links</h2>
            <ul>
    """.format(chat_id=chat_id)

    for link in user_links.get(chat_id, []):
        history_html += f'<li><a href="{link}" target="_blank">{link}</a></li>'

    history_html += """
            </ul>
            <footer>
                <p>Generated by Your Telegram Bot</p>
            </footer>
        </div>
    </body>
    </html>
    """

    # Save the HTML file
    file_path = os.path.join(directory, f"{chat_id}_history.html")
    with open(file_path, "w") as file:
        file.write(history_html)

    # Return the link to the generated HTML page
    return f"https://flask-production-4c83.up.railway.app/storage/links_history/{chat_id}_history.html"


# Function to send a message back to the user
def send_message(chat_id, text):
    url = TELEGRAM_API_URL + "sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    response = requests.post(url, json=payload)
    return response.json()

# Endpoint to set Telegram webhook
@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    webhook_url = request.args.get("url")
    if not webhook_url:
        return jsonify({"error": "Please provide a webhook URL."}), 400

    url = TELEGRAM_API_URL + "setWebhook"
    response = requests.post(url, json={"url": webhook_url})
    return jsonify(response.json())

# Serve static HTML files
@app.route('/storage/links_history/<filename>')
def serve_file(filename):
    return send_from_directory('/app/storage/links_history', filename)

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
